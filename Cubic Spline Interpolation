/******************************************************************************************************************************************************************

Roll no.:EE23B049
Name: Nishanth Senthil Kumar
Date: 24 October 2023
Version: 1
Description: Find the approximate value of the function using cubic spline interpolation (for the interval of values from -1 to 1)
Input: Polynomial order(which here we are using as number of points after modification)(argv[1]), Value of x for the output(argv[2],x0).
Output: Value of f(x0).

********************************************************************************************************************************************************************/




#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#define TOLERANCE pow(10, -7) // tolerance for checking if coefficient is 0

void partialPivoting(long double **coefficientsOfXi, long double *Bi, long double *greatestElement, long long int numberOfLinearEquations, long long int k);
void forwardElimination(long double **coefficientsOfXi, long double *Bi, long double *greatestElement, long long int nummberOfLinearEquations, long double error);
void backSubstitution(long double **coefficientsOfXi, long double*Bi, long double *Xi, long long int numberOfLinearEquations);
void gauss(long double **coeffiecientsOfXi, long double *Bi, long double *Xi, long long int numberOfLinearEquations, long double error);
long double function(long double x); // to approximate the value of the function



int main(int argc, char const *argv[])
{

    int order=atoi(argv[1]); //inputting the number of points
    long double x0=atof(argv[2]); //value at which we have to approximate
    long double xstart=-1;
    order=order-1;
    long double xend=1;
 

    long double arr1[order+1]; //to store the values of the x coordinate of knots
    long double arr2[order+1]; //to store the values of the y coordinate of knots
    FILE *fptr=fopen("coefficients.txt","w"); //will be temporarily used to store the coefficients of the double derivatives
    
    long double h=fabsl(xend-xstart)/order; 
    for(int i=0;i<=order;i++){
        arr1[i]=xstart;
        arr2[i]=function(xstart);
        xstart=xstart+h;

    } 
    
    for(int i=0;i<=order-1;i++){ //this entire for loop is used to generate the linear equations used to find the values of thr double derivatives

        if(i==0){ //this is used to generate the row for the second derivative at the start point is 0
            fprintf(fptr,"1.000000 ");

            for(int j=0;j<=order;j++){
            fprintf(fptr,"0.000000 ");
            }

        fprintf(fptr,"\n");

        }
        
       
       else{
        for(int j=1;j<i;j++){
            fprintf(fptr,"0.000000 ");
        }
        //using the method given in the numerical methods textbook
        long double temp1=arr1[i]-arr1[i-1];
        long double temp2=2*(arr1[i+1]-arr1[i-1]);
        long double temp3=arr1[i+1]-arr1[i];
        long double temp4=((6/(arr1[i+1]-arr1[i]))*(arr2[i+1]-arr2[i])) + ((6/(arr1[i]-arr1[i-1]))*(arr2[i-1]-arr2[i]));
        if(i==1){
            temp1=0.000000;
        }
        if(i==order-1){
            temp3=0.000000;
        }
        fprintf(fptr,"%Lf %Lf %Lf ",temp1,temp2,temp3);
        for(int j=order-i;j>1;j--){
            fprintf(fptr,"0.000000 ");
        }
        fprintf(fptr,"%Lf ",temp4);
        fprintf(fptr,"\n");
        
       }
            
    }
        for(int j=0;j<=order-1;j++){
                fprintf(fptr,"0.000000 ");

            }
        fprintf(fptr,"1.000000 ");
        fprintf(fptr,"0.000000 ");
        fprintf(fptr,"\n");

        long double error = pow(10, -6);
        fclose(fptr);

    
    FILE *fileWithCoeffiecients = fopen("coefficients.txt", "r"); //opeining the file
    int numberOfLinearEquations = order+1; 
    //alloting data to various arrays
    long double **coefficientsOfXi = (long double**)malloc(numberOfLinearEquations * sizeof(long double*));
    long double *Bi = (long double*)malloc(numberOfLinearEquations * sizeof(long double));   
    long double *Xi = (long double*)malloc(numberOfLinearEquations * sizeof(long double));   

    //using a 2-D array to store the coeffiecients of Xi
    for (int i = 0; i < numberOfLinearEquations + 1; i++)
    {
        *(coefficientsOfXi + i) = (long double *)malloc((numberOfLinearEquations) * sizeof(long double));
        for (int j = 0; j < numberOfLinearEquations; j++)
        {
            fscanf(fileWithCoeffiecients, "%Lf", &coefficientsOfXi[i][j]);
        }
        fscanf(fileWithCoeffiecients, "%Lf", &Bi[i]);
    }

    gauss(coefficientsOfXi, Bi, Xi, numberOfLinearEquations, error);
    long double temp1;
    long double temp2;
    int index;

    for(int i=0;i<numberOfLinearEquations;i++){ //this for loop is used to find in which partition x0 values lies in
        if(fabs(arr1[i]-x0)<=0.25){
            index=i;
           
        }
    }

    temp1=Xi[index]; //value of double derivative at ith point
    temp2=Xi[index-1]; //value of double derivative at (i-1)th point
    long double answer= (temp2/(6*(arr1[index]-arr1[index-1])))*(pow((arr1[index]-x0),3))
    + (temp1/(6*(arr1[index]-arr1[index-1]))) *(pow((x0-arr1[index-1]),3)) 
    + ((arr2[index-1]/(arr1[index]-arr1[index-1])) - (temp2*(arr1[index]-arr1[index-1])/6))*(arr1[index]-x0) 
    + ((arr2[index]/(arr1[index]-arr1[index-1])) - (temp1*(arr1[index]-arr1[index-1])/6))*(x0-arr1[index-1]);
   
    printf("%Lf",answer); //printing the answer
    printf("\n");
    //freeing memory
    free(Xi);
//  free(Bi);
    free(coefficientsOfXi);
    fclose(fileWithCoeffiecients);

    return 0;
}

long double function(long double x){ //function to calculate the actual value of f(x) used for sampling
    long double value =1/(1+(25*(pow(x,2))));
    return value;
}


//function to pivot
void partialPivoting(long double **coefficientsOfXi, long double *Bi, long double *greatestElement, long long int numberOfLinearEquations, long long int k)
{
    int p = k;
    double dummy;
    double big = fabs(coefficientsOfXi[k][k] / greatestElement[k]);

    for (int i = k + 1; i < numberOfLinearEquations; i++)
    {
        dummy = fabs(coefficientsOfXi[i][k]) / greatestElement[i];
        if (dummy > big)
        {
            big = dummy;
            p = i;
        }
    }

    if (p!= k)
    {
        //swapping the columns
        for (int j = k - 1; j < numberOfLinearEquations; j++) 
        {
            dummy = coefficientsOfXi[p][j];
            coefficientsOfXi[p][j] = coefficientsOfXi[k][j];
            coefficientsOfXi[k][j] = dummy;
        }

        //swapping the value of Bi
        dummy = Bi[p];
        Bi[p] = Bi[k];
        Bi[k] = dummy;

        //swapping the value of the greatest element
	    dummy = greatestElement[p];
	    greatestElement[p] = greatestElement[k];
	    greatestElement[k] = dummy;
    }
}

//function for forward elimination
void forwardElimination(long double **coefficientsOfXi, long double *Bi, long double *greatestElement, long long int nummberOfLinearEquations, long double error)
{
    for (int k  = 0; k < nummberOfLinearEquations - 1; k++)
    {
        partialPivoting(coefficientsOfXi, Bi, greatestElement, nummberOfLinearEquations, k); //pivoting and then proceeding to forward elimination

        if (fabs(coefficientsOfXi[k][k]/greatestElement[k]) < TOLERANCE) //error if the coefficient of Xi(k, k) is 0 
        {
            error = -1;
            break;
        }
       
        for(int i = k + 1; i < nummberOfLinearEquations; i++) //forward elimination
        {
            double factor = coefficientsOfXi[i][k]/coefficientsOfXi[k][k];

            for (int j = 0; j < nummberOfLinearEquations; j++)
            {
                coefficientsOfXi[i][j] -= factor * coefficientsOfXi[k][j];
            }
            Bi[i] -= factor * Bi[k];
        }
    }

    if (fabs(coefficientsOfXi[nummberOfLinearEquations - 1][nummberOfLinearEquations - 1] / greatestElement[nummberOfLinearEquations - 1]) < TOLERANCE)
    {
        error = -1;
    }
}

//function for back substitution
void backSubstitution(long double **coefficientsOfXi, long double*Bi, long double *Xi, long long int numberOfLinearEquations)
{
    Xi[numberOfLinearEquations - 1] = Bi[numberOfLinearEquations - 1] / coefficientsOfXi[numberOfLinearEquations - 1][numberOfLinearEquations - 1];
    for (int i = numberOfLinearEquations - 2; i >= 0; i--)
    {
        double sum = 0;
        for (int j = i+1; j < numberOfLinearEquations; j++)
        {
            sum += coefficientsOfXi[i][j] * Xi[j];
        }
        Xi[i] = (Bi[i] - sum) / coefficientsOfXi[i][i];
    }
}

void gauss(long double **coeffiecientsOfXi, long double *Bi, long double *Xi, long long int numberOfLinearEquations, long double error)
{
    long double *greatestElement = (long double *)malloc(numberOfLinearEquations * sizeof(long double));
    
    error = 0;

    for (int i = 0; i < numberOfLinearEquations; i++)
    {
        greatestElement[i] = fabs(coeffiecientsOfXi[i][0]);
        for (int j = 1; j < numberOfLinearEquations; j++)
        {
            if (fabs(coeffiecientsOfXi[i][j]) > greatestElement[i])
            {
                greatestElement[i] = coeffiecientsOfXi[i][j];
            }
        }
    }

    forwardElimination(coeffiecientsOfXi, Bi, greatestElement, numberOfLinearEquations, error);

    if (error != -1)
    {
        backSubstitution(coeffiecientsOfXi, Bi, Xi, numberOfLinearEquations);
    }
}
